= Pizza Generators

A collection of useful Rails generator scripts.

*NOTE* This is a fork of Ryan Bates' Nifty Generators. It has been altered so it fits the plugins I use. Use at your own risk!


== Install

  gem install iain-pizza-generators

== Why Pizza?

Here is what is Pizza compared to Nifty:

==== Done

* Haml is default for pizza_scaffold, use <tt>--erb</tt> to switch back to erb
* definition_list_for (from http://github.com/iain/model_based_html)
* table_for (from http://github.com/iain/model_based_html)
* form_for (from http://github.com/iain/fieldset_helper)
* ResourceController (from http://github.com/giraffesoft/resource_controller)
* Rails i18n and supposes Mr. T (from http://github.com/iain/mr.-t)
* WillPaginate (from http://github.com/mislav/will_paginate)
* Some validations for models automaticly entered and some belongs_to stuff too
* reset.sass for layout will keep your view tidy
* A main menu was added in app/views/shared/_menu.html.haml
* Provides a cancel_link helper

==== Todo

* AuthLogic usage with pizza_authentication (from http://github.com/binarylogic/authlogic)
* Support for namespaced controllers
* Use a FactoryGirl instead of fixtures
* Cucumber stories for RESTful controller in scaffold



== Usage

Once you install the gem, the generators will be available to all Rails
applications on your system. If you run script/generate without any
additional arguments you should see the available generators listed.

To run the generator, go to your rails project directory and call it
using the script/generate or script/destroy command.

  script/generate pizza_scaffold Recipe name:string index new


== Included Generators

* pizza_layout: generates generic layout, stylesheet, and helper files.
* pizza_scaffold: generates a controller and optional model/migration.
* pizza_config: generates a config YAML file and loader.
* pizza_authentication: generates user model with sign up and log in.

Run the command with the <tt>--help</tt> option to learn more.

  script/generate pizza_layout --help


== Troubleshooting

<b>I get "undefined method 'title'" error.</b>

Try running pizza_layout, that will generate this helper method. Or
you can just change the templates to whatever approach you prefer for
setting the title.


<b>I get "undefined method 'root_url'" error.</b>

Some generators default redirecting to the root_url. Set this in your
routes.rb file like this (substituting your controller name).

  map.root :controller => 'foo'


<b>I get a missing database error.</b>

Run <tt>rake db:migrate</tt>.


<b>Forms don't work.</b>

Try restarting your development server. Sometimes it doesn't detect the
change in the routing.


<b>I can't set new attributes in my User model.</b>

Add the attribute to the attr_accessible line in the model.


<b>The tests/specs don't work.</b>

Make sure you have mocha installed and require it in your spec/test helper.

  gem install mocha
  
  # in spec_helper.rb
  config.mock_with :mocha
  
  # in test_helper.rb
  require 'mocha'

Also, make sure you're using Rails 2.2.2 or greater.

<b>How to use the cancel_link?</b>

Add this code to your ApplicationController:

  before_filter :remember_back
  private
  def remember_back
    session[:back] = request.referrer if request.get?
  end

<b>Translating will_paginate</b>

Add this line to an initializer:
  
  WillPaginate::ViewHelpers.pagination_options.merge! I18n.t(:pagination)

When you support switching locales, you'll probably have this in ApplicationController:

  before_filter :set_locale
  private
  def set_locale
    I18n.locale = params[:locale]
    WillPaginate::ViewHelpers.pagination_options.merge! I18n.t(:pagination)
  end

Your translations should look something like this:

  en:
    pagination:
      class: "pagination"
      previous_label: "&laquo; Previous"
      next_label: "Next &raquo;"
      inner_window: 4 # links around the current_page
      outer_window: 1 # links around beginning and end
      separator: ' '
      param_name: :page
      params: ~
      renderer: "WillPaginate::LinkRenderer"
      page_links: true
      container: true

The initializer will use the properties from the default_locale. Any other language just needs to define their own exceptions to this. So if :en is the default locale and you would switch to :nl, you'd only need to do:

  nl:
    pagination:
      previous_label: "&laquo; Vorige"
      next_label: "Volgende &raquo;"

For more information, read mislav's code on github:
http://github.com/mislav/will_paginate/blob/master/lib/will_paginate/view_helpers.rb


== Development

This project can be found on github at the following URL.

http://github.com/iain/pizza-generators and http://github.com/ryanb/nifty-generators

If you wish the generators behaved differently, please consider
forking the project and modifying to your heart's content. (I did that! - Iain)
